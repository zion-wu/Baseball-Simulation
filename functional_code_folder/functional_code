{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6728bebf",
   "metadata": {},
   "source": [
    "# Cubs vs White Sox Simulation with Data + History\n",
    "\n",
    "This notebook loads 2025 batting, pitching, and fielding data for the Cubs and White Sox, processes team strengths, incorporates historical matchup records (from 2020), and simulates the May 18 matchup."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "28bd97fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Load team stats Excel files\n",
    "cubs_excel = pd.ExcelFile(\"cubs.xlsx\")\n",
    "sox_excel = pd.ExcelFile(\"white sox.xlsx\")\n",
    "\n",
    "cubs_batting = cubs_excel.parse(\"batting\")\n",
    "cubs_pitching = cubs_excel.parse(\"pitching\")\n",
    "cubs_fielding = cubs_excel.parse(\"fielding\")\n",
    "sox_batting = sox_excel.parse(\"batting\")\n",
    "sox_pitching = sox_excel.parse(\"pitching\")\n",
    "sox_fielding = sox_excel.parse(\"fielding\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a55d7a1c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Process batting\n",
    "def process_batting(df):\n",
    "    df.columns = df.iloc[0]\n",
    "    df = df[1:].reset_index(drop=True)\n",
    "    cols = ['OPS', 'AVG', 'SLG', 'OBP', 'WAR']\n",
    "    df[cols] = df[cols].apply(pd.to_numeric, errors='coerce')\n",
    "    return df[cols].mean()\n",
    "\n",
    "cubs_bat = process_batting(cubs_batting)\n",
    "sox_bat = process_batting(sox_batting)\n",
    "\n",
    "# Process pitching\n",
    "def best_pitcher(df):\n",
    "    df.columns = df.iloc[0]\n",
    "    df = df[1:].reset_index(drop=True)\n",
    "    df[['ERA', 'WHIP']] = df[['ERA', 'WHIP']].apply(pd.to_numeric, errors='coerce')\n",
    "    df = df[(df['ERA'] > 0) & (df['WHIP'] > 0)]\n",
    "    return df.sort_values(by='ERA').iloc[0][['ERA', 'WHIP']]\n",
    "\n",
    "cubs_pitch = best_pitcher(cubs_pitching)\n",
    "sox_pitch = best_pitcher(sox_pitching)\n",
    "\n",
    "# Process fielding\n",
    "def average_dwar(df):\n",
    "    df.columns = df.iloc[0]\n",
    "    df = df[1:].reset_index(drop=True)\n",
    "    df['DWAR'] = pd.to_numeric(df['DWAR'], errors='coerce')\n",
    "    return df['DWAR'].mean()\n",
    "\n",
    "cubs_dwar = average_dwar(cubs_fielding)\n",
    "sox_dwar = average_dwar(sox_fielding)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a0833e51",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Historical Cubs Win Rate: 0.556\n",
      "Avg Score Difference (Cubs - Sox): 0.185\n"
     ]
    }
   ],
   "source": [
    "# Load and analyze matchup history\n",
    "matchups = pd.read_excel(\"cubs vs white sox records.xlsx\")\n",
    "matchups['Date'] = pd.to_datetime(matchups['Year'])\n",
    "matchups['Winner'] = matchups.apply(lambda r: 'Cubs' if r['Cubs'] > r['White Sox'] else 'White Sox', axis=1)\n",
    "\n",
    "cubs_win_rate = (matchups['Winner'] == 'Cubs').mean()\n",
    "score_diff = (matchups['Cubs'] - matchups['White Sox']).mean()\n",
    "\n",
    "print(f\"Historical Cubs Win Rate: {cubs_win_rate:.3f}\")\n",
    "print(f\"Avg Score Difference (Cubs - Sox): {score_diff:.3f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2b72d79b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cubs Strength: 37.78\n",
      "White Sox Strength: 3.51\n"
     ]
    }
   ],
   "source": [
    "# Strength scoring function with history adjustments\n",
    "def calculate_strength(ops, war, era, whip, dwar, win_rate, score_diff):\n",
    "    offense = ops * 100\n",
    "    defense = era * 20 + whip * 10\n",
    "    fielding = dwar * 10\n",
    "    war_adj = war * 5\n",
    "    history_adj = (win_rate - 0.5) * 10 + score_diff * 5\n",
    "    return offense - defense + fielding + war_adj + history_adj\n",
    "\n",
    "cubs_strength = calculate_strength(\n",
    "    cubs_bat['OPS'], cubs_bat['WAR'], cubs_pitch['ERA'], cubs_pitch['WHIP'], cubs_dwar,\n",
    "    win_rate=cubs_win_rate, score_diff=score_diff)\n",
    "\n",
    "sox_strength = calculate_strength(\n",
    "    sox_bat['OPS'], sox_bat['WAR'], sox_pitch['ERA'], sox_pitch['WHIP'], sox_dwar,\n",
    "    win_rate=1 - cubs_win_rate, score_diff=-score_diff)\n",
    "\n",
    "print(f\"Cubs Strength: {cubs_strength:.2f}\")\n",
    "print(f\"White Sox Strength: {sox_strength:.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b28368c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Team</th>\n",
       "      <th>Win Probability</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Cubs</td>\n",
       "      <td>0.9165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>White Sox</td>\n",
       "      <td>0.0835</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Team  Win Probability\n",
       "0       Cubs           0.9165\n",
       "1  White Sox           0.0835"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Monte Carlo Simulation\n",
    "def simulate_game(strength1, strength2, sims=10000):\n",
    "    wins = sum(np.random.uniform(0, strength1 + strength2) < strength1 for _ in range(sims))\n",
    "    return wins / sims, 1 - wins / sims\n",
    "\n",
    "cubs_win, sox_win = simulate_game(cubs_strength, sox_strength)\n",
    "\n",
    "pd.DataFrame({\n",
    "    \"Team\": [\"Cubs\", \"White Sox\"],\n",
    "    \"Win Probability\": [cubs_win, sox_win]\n",
    "})"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
